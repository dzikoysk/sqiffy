package com.dzikoysk.sqiffy.dsl.statements

import com.dzikoysk.sqiffy.SqiffyDatabase
import com.dzikoysk.sqiffy.definition.DataType.SERIAL
import com.dzikoysk.sqiffy.dsl.Row
import com.dzikoysk.sqiffy.dsl.Statement
import com.dzikoysk.sqiffy.dsl.Table
import com.dzikoysk.sqiffy.dsl.Values
import com.dzikoysk.sqiffy.dsl.generator.ParameterAllocator
import com.dzikoysk.sqiffy.dsl.generator.bindArguments
import com.dzikoysk.sqiffy.dsl.generator.toQueryColumn
import org.slf4j.event.Level

open class AbstractInsertStatement(
    protected val database: SqiffyDatabase,
    protected val table: Table,
    protected val values: Values
) : Statement {

    protected val autogeneratedKey = table
        .getColumns()
        .firstOrNull { it.dataType == SERIAL }

    protected open fun <T> map(mapper: (Row) -> T): List<T> {
        return database.getJdbi().inTransaction<List<T>, Exception> { handle ->
            val allocator = ParameterAllocator()

            val (updateResult, customSelect) = database.sqlQueryGenerator.createInsertQuery(
                allocator = allocator,
                tableName = table.getName(),
                columns = values.getColumns().map { it.toQueryColumn() },
                autogeneratedKey = autogeneratedKey?.toQueryColumn()
            )

            database.logger.log(Level.DEBUG, "Executing query: ${updateResult.query} with arguments: ${updateResult.arguments}")

            val insertResult = handle
                .createUpdate(updateResult.query)
                .bindArguments(updateResult.arguments, values)
                .executeAndReturnGeneratedKeys()
                .map { view ->
                    when {
                        customSelect != null -> null
                        else ->
                            mapper(Row(
                                view = view,
                                autogeneratedKey = autogeneratedKey
                            ))
                    }
                }
                .list()

            when {
                customSelect != null -> {
                    database.logger.log(Level.DEBUG, "Executing query: $customSelect")
                    handle
                        .select(customSelect)
                        .map { view -> mapper(Row(view = view)) }
                        .list()
                }
                else -> insertResult
            }
        }
    }

}

open class InsertStatement(
    database: SqiffyDatabase,
    table: Table,
    values: Values
) : AbstractInsertStatement(database, table, values) {

    fun execute(): Unit =
        map { }.firstOrNull() ?: Unit

}

open class AutogeneratedKeyInsertStatement(
    database: SqiffyDatabase,
    table: Table,
    values: Values
) : AbstractInsertStatement(database, table, values) {

    public override fun <T> map(mapper: (Row) -> T): List<T> =
        super.map(mapper)

}
package com.dzikoysk.sqiffy.dialect.postgres

import com.dzikoysk.sqiffy.SqiffyDatabase
import com.dzikoysk.sqiffy.SqiffyDatabaseConfig
import com.dzikoysk.sqiffy.SqiffyLogger
import com.dzikoysk.sqiffy.StdoutSqiffyLogger
import com.dzikoysk.sqiffy.changelog.ChangelogBuilder
import com.dzikoysk.sqiffy.changelog.generator.dialects.PostgreSqlSchemeGenerator
import com.dzikoysk.sqiffy.definition.NamingStrategy.RAW
import com.dzikoysk.sqiffy.dialect.Dialect.POSTGRESQL
import com.dzikoysk.sqiffy.dialect.createGenericJdbi
import com.dzikoysk.sqiffy.dsl.*
import com.dzikoysk.sqiffy.dsl.generator.dialects.PostgreSqlQueryGenerator
import com.dzikoysk.sqiffy.transaction.JdbiTransaction
import com.dzikoysk.sqiffy.transaction.NoTransaction
import com.dzikoysk.sqiffy.transaction.Transaction
import com.zaxxer.hikari.HikariDataSource
import org.jdbi.v3.core.Handle
import org.jdbi.v3.postgres.PostgresPlugin

interface PostgresDslHandle : DslHandle {

    fun upsert(table: TableWithAutogeneratedKey<*>): UpsertStatement =
        upsert(
            table = table,
            insertValues = null,
            updateValues = null,
        )

    fun <T : Table> upsert(
        table: T,
        conflictingColumns: (T) -> Collection<Column<*>>,
    ): UpsertStatement =
        upsert(
            table = table,
            insertValues = null,
            updateValues = null,
            conflictingColumns = conflictingColumns
        )

    fun upsert(
        table: TableWithAutogeneratedKey<*>,
        insertValues: InsertValuesBody?,
        updateValues: UpdateValuesBody? = null
    ): UpsertStatement =
        UpsertStatement(
            database = getDatabase(),
            handleAccessor = getHandleAccessor(),
            table = table,
            insertValuesSupplier = insertValues,
            updateValuesSupplier = updateValues
        )

    fun <T : Table> upsert(
        table: T,
        conflictingColumns: T.() -> Collection<Column<*>>,
        insertValues: InsertValuesBody?,
        updateValues: UpdateValuesBody? = null,
    ): UpsertStatement =
        UpsertStatement(
            database = getDatabase(),
            handleAccessor = getHandleAccessor(),
            table = table,
            insertValuesSupplier = insertValues,
            updateValuesSupplier = updateValues,
            conflictingColumns = conflictingColumns(table),
        )

}

class PostgresDatabase(state: SqiffyDatabaseConfig) : PostgresDslHandle, SqiffyDatabase(state) {

    companion object {
        fun createPostgresDatabase(
            logger: SqiffyLogger = StdoutSqiffyLogger(),
            dataSource: HikariDataSource
        ): PostgresDatabase {
            return PostgresDatabase(
                state = SqiffyDatabaseConfig(
                    logger = logger,
                    dataSource = dataSource,
                    localJdbi = createGenericJdbi(dataSource).also {
                        it.installPlugin(PostgresPlugin())
                    },
                    dialect = POSTGRESQL,
                    sqlQueryGenerator = PostgreSqlQueryGenerator,
                    changelogBuilder = ChangelogBuilder(PostgreSqlSchemeGenerator, RAW)
                )
            )
        }
    }

    operator fun invoke(transaction: Transaction): PostgresDslHandle =
        transaction.invoke(this)

}

class PostgresJdbiDslHandle(
    database: PostgresDatabase,
    handle: Handle
) : PostgresDslHandle, JdbiDslHandle<PostgresDatabase>(database, handle)

operator fun Transaction.invoke(database: PostgresDatabase): PostgresDslHandle =
    when (this) {
        is JdbiTransaction -> PostgresJdbiDslHandle(database, handle)
        NoTransaction -> database
    }